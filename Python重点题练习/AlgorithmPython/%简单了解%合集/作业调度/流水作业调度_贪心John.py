# -*- coding: utf-8 -*-
# 流水作业调度问题介绍, 当时上课详细讲过, 觉得很有难度, 需要使用一定的技巧来量化整个过程的关系
# 但是现在看来, 这个问题的难度并不大, 但是需要一定的数学基础, 以及对于问题的抽象能力. 当时认真去考虑了, 也分析了在流水线上工作的时空关系
# n个作业{1，2，…，n}要在由2台机器M1和M2组成的流水线上完成加工。每个作业加工的顺序都是先在M1上加工，然后在M2上加工。M1和M2加工作业i所需的时间分别为ai和bi
# 现在细节有点记不清了, 于是去参考了https://blog.csdn.net/liufeng_king/article/details/8678316等几个文章再让bing帮我改一改, 期末考能看懂即可

# 用Johnson算法求解流水作业调度问题(贪心)
# 假设有5个作业，每个作业在两台机器上的加工时间如下
a = [3, 8, 4, 9, 6]  # ?在机器M1上的加工时间
b = [6, 2, 10, 7, 5]  # ?在机器M2上的加工时间
n = len(a)  # ?作业数量n

# 按照Johnson算法的步骤，将作业分为两组
N1 = []  # 存放满足a[i] <= b[i]的作业编号
N2 = []  # 存放满足a[i] > b[i]的作业编号

for i in range(n):
    if a[i] <= b[i]:
        N1.append(i)
    else:
        N2.append(i)

# 将N1中的作业按照a[i]的非减序排序, N2中的作业按照b[i]的非增序排序
N1.sort(key=lambda i: a[i])
N2.sort(key=lambda i: b[i], reverse=True)

best = N1 + N2  # 将N1和N2合并为最优调度序列

# 计算最优调度所需的总时间
T1 = 0  # M1上的累计时间
T2 = 0  # M2上的累计时间
for i in best:
    T1 += a[i]
    T2 = max(T1, T2) + b[i]

# 输出结果
print("最优调度总时间为：", T2)
print("最优调度方案为：", [i for i in best])
